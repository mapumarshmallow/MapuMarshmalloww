{"version":3,"sources":["logo.svg","pages/home.jsx","pages/about.jsx","pages/login.jsx","pages/admin.jsx","pages/404.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","logo","alt","style","color","href","target","rel","type","onClick","e","preventDefault","window","location","About","Login","Admin","NotFound","App","background","padding","margin","textDecoration","to","exact","path","component","PageNotFound","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,iMCkD5BC,G,MA9CF,WACT,OAEI,4BAAQC,UAAU,cAClB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2BACE,yCACa,mDADb,eAIF,6BACE,uBACEH,UAAU,WAAWI,MAAO,CAACC,MAAM,UACnCC,KAAK,+CACLC,OAAO,SACPC,IAAI,uBAJN,aADF,IAOO,uBACHR,UAAU,WAAWI,MAAO,CAACC,MAAM,QACnCC,KAAK,4CACLC,OAAO,SACPC,IAAI,uBAJD,YAPP,IAaO,uBACHR,UAAU,WAAWI,MAAO,CAACC,MAAM,OACnCC,KAAK,sFACLC,OAAO,SACPC,IAAI,uBAJD,YAUP,6BACE,4BACEC,KAAK,SAASC,QAAS,SAACC,GACtBA,EAAEC,iBACFC,OAAOC,SAASR,KAAK,sBAHzB,gCC1BKS,EAVD,WAEV,OACI,yBAAKf,UAAU,cAAf,oBCKOgB,EARD,WACV,OACI,yBAAKhB,UAAU,cAAf,eCMOiB,EARD,WACV,OACI,yBAAKjB,UAAU,cAAf,eCMOkB,EARE,WACb,OACI,yBAAKlB,UAAU,cAAf,mBCyCOmB,MA/Bf,WACE,OACE,6BAEE,kBAAC,IAAD,KACE,yBAAKf,MAAO,CAACgB,WAAW,QACtBC,QAAQ,OACRhB,MAAM,UAEN,kBAAC,IAAD,CAAMD,MAAO,CAACkB,OAAO,OAAQjB,MAAM,QAASkB,eAAgB,QAASC,GAAG,KAAxE,QACA,kBAAC,IAAD,CAAMpB,MAAO,CAACkB,OAAO,OAAQjB,MAAM,QAASkB,eAAgB,QAASC,GAAG,UAAxE,SACA,kBAAC,IAAD,CAAMpB,MAAO,CAACkB,OAAO,OAAQjB,MAAM,QAASkB,eAAgB,QAASC,GAAG,UAAxE,UAIF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWZ,IACtC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,SAASC,UAAWV,IACtC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,SAASC,UAAWX,IACtC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,OAAOC,UAAWC,IACpC,kBAAC,IAAD,CAAUJ,GAAG,aCvBHK,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b952b0da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9d56970a.svg\";","import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\n\nconst Home = () =>{\n    return(\n\n        <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          <b>\n            Welcome to <code>Mapu Marshmalloww</code> website!!\n          </b>\n        </p>\n        <div>\n          <a\n            className=\"App-link\" style={{color:\"purple\"}}\n            href=\"https://www.instagram.com/mapu.marshmalloww/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n            Instagram\n          </a> <a\n            className=\"App-link\" style={{color:\"blue\"}}\n            href=\"https://www.facebook.com/mapumarshmalloww\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n            FaceBook\n          </a> <a\n            className=\"App-link\" style={{color:\"red\"}}\n            href=\"https://www.youtube.com/watch?v=tad5W3Sm670&list=PLGaFouLvwkgDxFgBtTrohIEprCaDBmgi-\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n            YouTube\n          </a>\n        </div>\n\n        \n        <div>\n          <button\n            type=\"button\" onClick={(e) => { \n              e.preventDefault();\n              window.location.href='http://google.com';\n              }\n              }>Test Button go to Google</button>\n        </div>\n        \n      </header>\n    )    \n}\n\nexport default Home;","import React from 'react';\n\nconst About = () => {\n\n    return(\n        <div className=\"App-header\">\n            About Mapu Page\n        </div>\n    )\n\n}\n\nexport default About;","import React from 'react';\n\nconst Login = () => {\n    return(\n        <div className=\"App-header\">\n            Login Page\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\n\nconst Admin = () => {\n    return(\n        <div className=\"App-header\">\n            Admin Page\n        </div>\n    )\n}\n\nexport default Admin;","import React from 'react';\n\nconst NotFound = () => {\n    return(\n        <div className=\"App-header\">\n            Page Not Found\n        </div>\n    )\n}\n\nexport default NotFound;","import React from 'react';\nimport { HashRouter as Router,\n      Switch,\n      Route,\n      Redirect,\n      Link }\n  from 'react-router-dom';\nimport Home from './pages/home';\nimport About from './pages/about';\nimport Login from './pages/login';\nimport Admin from './pages/admin';\nimport PageNotFound from './pages/404';\n\n\nfunction App() {\n  return (\n    <div>\n      \n      <Router>\n        <div style={{background:\"black\",\n          padding:\"10px\",\n          color:\"white\"}}>\n          \n          <Link style={{margin:\"10px\", color:\"white\", textDecoration: 'none'}} to=\"/\">Home</Link>\n          <Link style={{margin:\"10px\", color:\"white\", textDecoration: 'none'}} to=\"/about\">About</Link>\n          <Link style={{margin:\"10px\", color:\"white\", textDecoration: 'none'}} to=\"/login\">Login</Link>\n        </div>\n        \n\n        <Switch>\n          <Route exact path=\"/about\" component={About}/>\n          <Route exact path=\"/\" component={Home}/>\n          <Route exact path=\"/admin\" component={Admin}/>\n          <Route exact path=\"/login\" component={Login}/>\n          <Route exact path=\"/404\" component={PageNotFound}/>\n          <Redirect to=\"/404\"/>\n        </Switch>\n\n    </Router>\n    </div>\n    \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}